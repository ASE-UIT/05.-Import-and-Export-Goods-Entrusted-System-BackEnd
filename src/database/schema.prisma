generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//this is just for the initial setup

enum StatusEnum {
    ACTIVE
    INACTIVE
}

enum PackageType {
    BOX
    PALLET
    CRATE
    DRUM
    BAG
    BULK
    OTHER
}

enum InvoiceStatus {
    PAID
    UNPAID
    PARTIAL
}

model User {
    id        String   @id @default(cuid())
    username  String   @unique
    email     String   @unique
    name      String?
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    roleId     String?
    role       Role?     @relation(fields: [roleId], references: [id])
    employeeId String?   @unique
    employee   Employee? @relation(fields: [employeeId], references: [id])
}

model Role {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users User[]
}

model Employee {
    id        String   @id @default(cuid())
    name      String
    email     String   @unique
    phone     String   @unique
    address   String
    position  String
    dob       DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String?
    user   User?
}

model Customer {
    id        String   @id @default(cuid())
    name      String
    shortName String
    email     String   @unique
    phone     String   @unique
    taxId     String   @unique
    address   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    legalReps  LegalRep[]
    quotations QuotationRequest[]
}

model LegalRep {
    id        String   @id @default(cuid())
    name      String
    email     String   @unique
    phone     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    custormerId String?
    customer    Customer? @relation(fields: [custormerId], references: [id])
}

model Provider {
    id        String     @id @default(cuid())
    name      String
    email     String     @unique
    phone     String     @unique
    address   String
    country   String
    status    StatusEnum @default(ACTIVE)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    freights    Freigth[]
    contactReps ContactRep[]
}

model Freigth {
    id          String   @id @default(cuid())
    name        String
    origin      String
    destination String
    carrier     String
    freq        String
    currency    String
    transitTime String
    transit     String
    remarks     String
    OF_20DC     String
    OF_40DC     String
    OF_40HC     String
    OF_20RF     String
    OF_40RF     String
    validFrom   DateTime
    validUntil  DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    providerId String?
    provider   Provider? @relation(fields: [providerId], references: [id])
}

model ContactRep {
    id    String @id @default(cuid())
    name  String
    email String @unique
    phone String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    providerId String?
    provider   Provider? @relation(fields: [providerId], references: [id])
}

model Quotation {
    id             String   @id @default(cuid())
    totalPrice     Float
    pickupDate     DateTime
    deliveryDate   DateTime
    quoteDate      DateTime
    expirationDate DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    quotationRequestId String?
    quotationRequest   QuotationRequest?

    contract Contract?
    invoice  Invoice?
    services ServicesOnQuotations[]
}

model Service {
    id          String   @id @default(cuid())
    name        String
    description String
    fee         Float
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    quotations ServicesOnQuotations[]
}

model ServicesOnQuotations {
    id          String    @id @default(cuid())
    serviceId   String
    quotationId String
    quotation   Quotation @relation(fields: [quotationId], references: [id])
    service     Service   @relation(fields: [serviceId], references: [id])
}

model QuotationRequest {
    id          String     @id @default(cuid())
    requestDate DateTime
    status      StatusEnum @default(ACTIVE)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    quotationId             String?                  @unique
    quotation               Quotation?               @relation(fields: [quotationId], references: [id])
    customerId              String?
    customer                Customer?                @relation(fields: [customerId], references: [id])
    QuotationRequestDetails QuotationRequestDetail[]
    PackageDetail           PackageDetail[]
}

model QuotationRequestDetail {
    id                String   @id @default(cuid())
    origin            String
    destination       String
    shipmentReadyDate DateTime
    shipmentDeadline  DateTime
    cargoInsurance    Boolean
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    quotationRequestId String?
    quotationRequest   QuotationRequest? @relation(fields: [quotationRequestId], references: [id])

    packageDetails PackageDetail[]
}

model PackageDetail {
    id              String      @id @default(cuid())
    specialHandling String
    packageType     PackageType
    weight          Float
    dimensions      String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    quotationRequestDetailId String?
    quotationRequestDetail   QuotationRequestDetail? @relation(fields: [quotationRequestDetailId], references: [id])
    QuotationRequest         QuotationRequest?       @relation(fields: [quotationRequestId], references: [id])
    quotationRequestId       String?
}

model Contract {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    quotationId String    @unique
    quotation   Quotation @relation(fields: [quotationId], references: [id])
}

model Invoice {
    id          String        @id @default(cuid())
    paidDate    DateTime
    status      InvoiceStatus
    taxAmount   Float
    totalAmount Float
    paidAmount  Float
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    quotationId String        @unique
    quotation   Quotation     @relation(fields: [quotationId], references: [id])

    payments Payment[]
}

model Payment {
    id         String   @id @default(cuid())
    paidAmount Float
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    invoiceId String?
    invoice   Invoice? @relation(fields: [invoiceId], references: [id])
}
